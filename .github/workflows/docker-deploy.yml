name: Docker Pull & Deploy

on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      - name: Get public IP from EC2 tag
        id: get_ip
        run: |
          IP=$(aws ec2 describe-instances \
            --region ap-northeast-2 \
            --filters "Name=tag:Name,Values=ndns-go" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          echo "PUBLIC_IP=$IP" >> $GITHUB_ENV

      - name: Remove old deploy directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
              rm -rf /home/ubuntu/deploy
        
      - name: Copy deploy directory to EC2 (flattened)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: "deploy/**"
          target: "/home/ubuntu/deploy"
          strip_components: 1
        


      - name: Run deploy.sh on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/ndns-go:latest
            chmod +x /home/ubuntu/deploy/deploy.sh
            /home/ubuntu/deploy/deploy.sh

      - name: Notify Discord on Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: ✅ **ndns-go 배포 완료**
          description: |
            - 브랜치: `${{ github.ref_name }}`
            - 커밋: `${{ github.sha }}`
            - 시간: `${{ github.event.head_commit.timestamp }}`
